knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
suppressPackageStartupMessages({
library(rgbif)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(viridis)
library(sf)
library(geobr)
library(vegan)
library(knitr)
library(leaflet)
})
occ_download_wait('0054387-250525065834625')
dados_formigas <- occ_download_get("0054387-250525065834625", overwrite = TRUE) %>%
occ_download_import()
dados_filtrados <- dados_formigas %>%
select(genus, stateProvince, decimalLatitude, decimalLongitude) %>%
filter(!is.na(genus), !is.na(stateProvince),
!is.na(decimalLatitude), !is.na(decimalLongitude)) %>%
rename(
genero = genus,
estado = stateProvince,
latitude = decimalLatitude,
longitude = decimalLongitude
)
padroniza_estado <- function(estado) {
estado <- tolower(estado)
estado <- gsub("ã", "a", estado)
estado <- gsub("á", "a", estado)
estado <- gsub("ă", "a", estado)
estado <- gsub("â", "a", estado)
estado <- gsub("é", "e", estado)
estado <- gsub("ê", "e", estado)
estado <- gsub("í", "i", estado)
estado <- gsub("ó", "o", estado)
estado <- gsub("ô", "o", estado)
estado <- gsub("ú", "u", estado)
estado <- gsub("ç", "c", estado)
estado <- trimws(estado)
if (estado %in% c("amapa", "amapá")) return("Amapá")
if (estado %in% c("amazonas", "state of amazonas", "manaus")) return("Amazônas")
if (estado %in% c("ce", "ceara", "ceará")) return("Ceará")
if (estado %in% c("df", "distrito federal", "federal district")) return("Distrito Federal")
if (estado %in% c("espirito santo", "espírito santo", "esp�rito santo")) return("Espírito Santo")
if (estado %in% c("estado de sao paulo", "sp", "sao paulo", "são paulo", "s�o paulo", "sao paulo ", "Săo paulo")) return("São Paulo")
if (estado %in% c("goias", "goiás", "goi�s")) return("Goiás")
if (estado %in% c("maranhao", "maranhão")) return("Maranhão")
if (estado %in% c("mato grosso", "matto grasso")) return("Mato Grosso")
if (estado %in% c("mato grosso do sul", "matto grasso do sul", "morraria do sul")) return("Mato Grosso do Sul")
if (estado %in% c("mg", "minas gerais", "minas gerias")) return("Minas Gerais")
if (estado %in% c("para", "pará", "par�")) return("Pará")
if (estado %in% c("paraiba", "paraíba")) return("Paraíba")
if (estado %in% c("parana", "paraná", "paranã", "paran�")) return("Paraná")
if (estado %in% c("piaui", "piauí")) return("Piauí")
if (estado %in% c("rio de janeiro", "rio janeiro", "rio de janeira")) return("Rio de Janeiro")
if (estado %in% c("rondonia", "rondônia", "rond�nia", "rodonia", "rondónia")) return("Rondônia")
if (estado %in% c("santa catarina", "santa catarina (catharina)")) return("Santa Catarina")
if (estado %in% c("tocantins", "to")) return("Tocantins")
return(paste0(toupper(substring(estado, 1, 1)), substring(estado, 2)))
}
# 2. Criar a tabela já com estado corrigido direto
dados_filtrados <- dados_formigas %>%
select(genus, stateProvince, decimalLatitude, decimalLongitude) %>%
filter(!is.na(genus), !is.na(stateProvince),
!is.na(decimalLatitude), !is.na(decimalLongitude)) %>%
mutate(stateProvince = sapply(stateProvince, padroniza_estado)) %>%
rename(
genero = genus,
estado = stateProvince,
latitude = decimalLatitude,
longitude = decimalLongitude
)
#Criar um novo objeto só com registros que têm estado informado
dados_com_estado <- dados_filtrados %>%
filter(
!is.na(estado),
estado != "",
estado != " ",
!grepl("Nao informado", estado, ignore.case = TRUE)
)
dados_validos <- dados_com_estado %>%
filter(!is.na(genero), genero != "", genero != " ")
# Baixar o shapefile de biomas
biomas <- read_biomes(year = 2019)
# Transformar os dados em objeto espacial (geográfico)
dados_sf <- st_as_sf(dados_validos,
coords = c("longitude", "latitude"),
crs = 4326)
# Transformar os biomas para o mesmo CRS
biomas <- st_transform(biomas, crs = 4326)
# Juntar os dados com os biomas por interseção espacial
dados_com_bioma <- st_join(dados_sf, biomas["name_biome"]) %>%
filter(!is.na(name_biome)) %>%
rename(bioma = name_biome)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
---
output: html_document
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(leaflet)
library(geobr)
library(sf)
library(vegan)
library(stats)
library(knitr)
library(kableExtra)})
dados_com_bioma <- readRDS("dados_com_bioma.rds")
registros_estado <- dados_com_bioma %>%
count(estado, name = "n_registros")
generos_estado <- dados_com_bioma %>%
distinct(genero, estado) %>%
count(estado, name = "riqueza_generos")
generos_bioma <- dados_com_bioma %>%
distinct(genero, bioma) %>%
count(bioma, name = "riqueza_generos")
setwd("C:/Users/USUÁRIO/Pictures/Formigas_projeto.final")
setwd("~/Aula/Erika e Julia/App")
shiny::runApp()
# ================= EXECUÇÃO ======================
shinyApp(ui, server)
# ================= EXECUÇÃO ======================
shinyApp(ui, server)
shiny::runApp('~/Aula/Erika e Julia/App')
install.packages("shinyjs")
shiny::runApp()
runApp()
runApp()
setwd("C:/Users/USUÁRIO/Pictures/Formigas_projeto.final")
dados_com_bioma <- readRDS("dados_com_bioma.rds")
registros_estado <- dados_com_bioma %>%
count(estado, name = "n_registros")
dados_com_bioma <- readRDS("dados_com_bioma.rds")
registros_estado <- dados_com_bioma %>%
count(estado, name = "n_registros")
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(leaflet)
library(geobr)
library(sf)
library(vegan)
library(stats)
library(knitr)
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(leaflet)
library(geobr)
library(sf)
library(vegan)
library(stats)
library(knitr)
library(kableExtra)})
dados_com_bioma <- readRDS("dados_com_bioma.rds")
registros_estado <- dados_com_bioma %>%
count(estado, name = "n_registros")
generos_estado <- dados_com_bioma %>%
distinct(genero, estado) %>%
count(estado, name = "riqueza_generos")
generos_bioma <- dados_com_bioma %>%
distinct(genero, bioma) %>%
count(bioma, name = "riqueza_generos")
# 1. Carregamento e preparação dos dados geográficos
estados_br <- read_state(year = 2020) %>%
st_transform(crs = 4326) %>%  # Converter para WGS84
mutate(name_state_lower = tolower(name_state))
# 2. Preparação dos dados de riqueza
riqueza_por_estado <- generos_estado %>%
mutate(estado_lower = tolower(estado))
# 3. Fazer o join corretamente
estados_mapa <- estados_br %>%
left_join(riqueza_por_estado, by = c("name_state_lower" = "estado_lower"))
# 4. Criação do mapa
pal <- colorNumeric(
palette = "YlGnBu",
domain = estados_mapa$riqueza_generos,
na.color = "#f7f7f7"
)
leaflet(estados_mapa) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(riqueza_generos),
weight = 1,
color = "white",
fillOpacity = 0.7,
label = ~paste0(
name_state, ": ",
ifelse(is.na(riqueza_generos), "Sem dados", riqueza_generos),
" gêneros"
),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
bringToFront = TRUE
)
) %>%
addLegend(
position = "bottomright",
pal = pal,
values = ~riqueza_generos,
title = "Riqueza de Gêneros",
na.label = "Sem dados"
)
top3_generos_bioma <- dados_com_bioma %>%
count(bioma, genero, sort = TRUE) %>%
group_by(bioma) %>%
slice_max(order_by = n, n = 3) %>%
arrange(bioma, desc(n)) %>%
ungroup()
## Gráfico de barras agrupadas
ggplot(top3_generos_bioma, aes(x = reorder(bioma, -n), y = n, fill = genero)) +
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
labs(x = "Bioma", y = "Nº de registros", fill = "Gênero",
title = "Top 3 gêneros mais frequentes por bioma") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
generos_unicos <- dados_com_bioma %>%
group_by(genero) %>%
filter(n_distinct(bioma) == 1) %>%
count(bioma, name = "n_generos_exclusivos")
generos_unicos %>%
ggplot(aes(x = reorder(bioma, -n_generos_exclusivos), y = n_generos_exclusivos)) +
geom_col(fill = "darkgreen") +
labs(title = "Número de gêneros exclusivos por bioma", x = NULL, y = "Gêneros exclusivos") +
theme_classic2() +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
mat_bioma <- xtabs(~ bioma + genero, data = dados_com_bioma)
raref_result <- rarefy(mat_bioma, sample = min(rowSums(mat_bioma)))
raref_df <- data.frame(Bioma = names(raref_result), Riqueza = raref_result)
ggplot(raref_df, aes(x = reorder(Bioma, Riqueza), y = Riqueza)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Riqueza Esperada de Gêneros por Bioma", x = NULL, y = "Número de Gêneros")
correlacao_df <- inner_join(registros_estado, generos_estado, by = "estado")
cor.test(correlacao_df$n_registros, correlacao_df$riqueza_generos, method = "pearson")
#Gráfico de correlação
ggplot(correlacao_df, aes(x = n_registros, y = riqueza_generos)) +
geom_point(aes(size = n_registros, fill = estado),
color = "black", shape = 21, stroke = 0.5, alpha = 0.9) +
geom_smooth(method = "lm", se = TRUE, color = "gray30", fill = "gray80", linewidth = 1, linetype = "dashed") +
stat_cor(
method = "pearson",
aes(label = paste(..r.label.., ..p.label.., sep = "~`,`~")),
label.x = min(correlacao_df$n_registros) + 10,
label.y = max(correlacao_df$riqueza_generos) * 0.95,
size = 4.2,
color = "black"
) +
labs(
title = "Relação entre Esforço Amostral e Riqueza de Gêneros de Formigas",
x = "Número de Registros",
y = "Número de Gêneros",
size = "Esforço Amostral",
fill = "Estado"
) +
theme_classic(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15),
plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
axis.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
) +
scale_fill_viridis_d(option = "turbo", begin = 0.1, end = 0.9) +
scale_size_continuous(range = c(2.5, 7)) +
guides(
fill = guide_legend(override.aes = list(size = 5, shape = 21, color = "black", stroke = 0.5))
)
riqueza_estado_bioma <- dados_com_bioma %>%
distinct(bioma, estado, genero) %>%
count(bioma, estado, name = "riqueza_generos")
kruskal.test(riqueza_generos ~ bioma, data = riqueza_estado_bioma)
tabela_gen_estado <- table(dados_com_bioma$genero, dados_com_bioma$estado)
chisq.test(tabela_gen_estado, simulate.p.value = TRUE, B = 10000)
